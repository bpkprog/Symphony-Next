<?xml version="1.0" encoding="utf-8"?>
<namespace name="SymMng.SymphonyTask" platform="Win32">
  <class name="TSymphonyTask" file="SymMng.SymphonyTask.pas" line="16">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FPlugIn" type="TPlugIn" visibility="private" size="4" offset="4" file="SymMng.SymphonyTask.pas" line="18" />
      <field name="FXML" type="IXMLNode" visibility="private" size="4" offset="8" file="SymMng.SymphonyTask.pas" line="19" />
      <function name="GetCaption" visibility="private" file="SymMng.SymphonyTask.pas" line="20">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetFileName" visibility="private" file="SymMng.SymphonyTask.pas" line="21">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetHint" visibility="private" file="SymMng.SymphonyTask.pas" line="22">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetID" visibility="private" file="SymMng.SymphonyTask.pas" line="23">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="Getitasktype" visibility="private" file="SymMng.SymphonyTask.pas" line="24">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="GetParams" visibility="private" file="SymMng.SymphonyTask.pas" line="25">
        <parameters>
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetReadOnly" visibility="private" file="SymMng.SymphonyTask.pas" line="26">
        <parameters>
          <retval type="Integer" />
        </parameters>
      </function>
      <procedure name="SetCaption" visibility="private" file="SymMng.SymphonyTask.pas" line="27">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetFileName" visibility="private" file="SymMng.SymphonyTask.pas" line="28">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetHint" visibility="private" file="SymMng.SymphonyTask.pas" line="29">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetID" visibility="private" file="SymMng.SymphonyTask.pas" line="30">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="Setitasktype" visibility="private" file="SymMng.SymphonyTask.pas" line="31">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetParams" visibility="private" file="SymMng.SymphonyTask.pas" line="32">
        <parameters>
          <parameter name="Value" type="string" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetPlugIn" visibility="private" file="SymMng.SymphonyTask.pas" line="33">
        <parameters>
          <parameter name="Value" type="TPlugIn" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetReadOnly" visibility="private" file="SymMng.SymphonyTask.pas" line="34">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const" />
        </parameters>
      </procedure>
      <procedure name="SetXML" visibility="private" file="SymMng.SymphonyTask.pas" line="35">
        <parameters>
          <parameter name="Value" type="IXMLNode" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetPlugInParam" visibility="private" file="SymMng.SymphonyTask.pas" line="36">
        <parameters>
          <parameter name="Source" type="ISymphonyPlugInAction" />
          <retval type="ISymphonyPlugInCommand" />
        </parameters>
      </function>
      <procedure name="GetSessonParam" visibility="private" file="SymMng.SymphonyTask.pas" line="37">
        <parameters>
          <parameter name="ServerName" type="string" paramflags="var" />
          <parameter name="DatabaseName" type="string" paramflags="var" />
          <parameter name="UserName" type="string" paramflags="var" />
          <parameter name="Password" type="string" paramflags="var" />
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="SymMng.SymphonyTask.pas" line="39">
        <parameters>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public" file="SymMng.SymphonyTask.pas" line="40">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
        </parameters>
      </constructor>
      <property name="XML" visibility="public" read="FXML" write="SetXML" type="IXMLNode" file="SymMng.SymphonyTask.pas" line="42" />
      <property name="ID" visibility="public" read="GetID" write="SetID" type="Integer" file="SymMng.SymphonyTask.pas" line="43" />
      <property name="Caption" visibility="public" read="GetCaption" write="SetCaption" type="string" default="0" file="SymMng.SymphonyTask.pas" line="44" />
      <property name="Hint" visibility="public" read="GetHint" write="SetHint" type="string" default="0" file="SymMng.SymphonyTask.pas" line="45" />
      <property name="itasktype" visibility="public" read="Getitasktype" write="Setitasktype" type="Integer" file="SymMng.SymphonyTask.pas" line="46" />
      <property name="FileName" visibility="public" read="GetFileName" write="SetFileName" type="string" default="0" file="SymMng.SymphonyTask.pas" line="47" />
      <property name="Params" visibility="public" read="GetParams" write="SetParams" type="string" default="0" file="SymMng.SymphonyTask.pas" line="48" />
      <property name="ReadOnly" visibility="public" read="GetReadOnly" write="SetReadOnly" type="Integer" file="SymMng.SymphonyTask.pas" line="49" />
      <property name="PlugIn" visibility="public" read="FPlugIn" write="SetPlugIn" type="TPlugIn" file="SymMng.SymphonyTask.pas" line="51" />
    </members>
  </class>
  <class name="TSymphonyTaskList" file="SymMng.SymphonyTask.pas" line="54">
    <ancestor name="{System.Generics.Collections}TObjectList&lt;SymMng.SymphonyTask.TSymphonyTask&gt;" namespace="SymMng.SymphonyTask">
      <methodref name="Notify" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <propertyref name="OwnsObjects" visibility="public">
      </propertyref>
      <ancestor name="{System.Generics.Collections}TList&lt;SymMng.SymphonyTask.TSymphonyTask&gt;" namespace="SymMng.SymphonyTask">
        <methodref name="GetCapacity" visibility="private" procflags="inline">
        </methodref>
        <methodref name="SetCapacity" visibility="private" procflags="overload inline">
        </methodref>
        <methodref name="SetCount" visibility="private" procflags="inline">
        </methodref>
        <methodref name="GetItem" visibility="private" procflags="inline">
        </methodref>
        <methodref name="SetItem" visibility="private" procflags="inline">
        </methodref>
        <methodref name="GrowCheck" visibility="private" procflags="inline">
        </methodref>
        <methodref name="DoDelete" visibility="private" procflags="inline">
        </methodref>
        <methodref name="InternalNotify" visibility="private">
        </methodref>
        <methodref name="InternalCompare" visibility="private">
        </methodref>
        <propertyref name="FCount" visibility="private">
        </propertyref>
        <methodref name="ItemValue" visibility="protected">
        </methodref>
        <methodref name="DoGetEnumerator" visibility="protected" procflags="override">
        </methodref>
        <methodref name="Notify" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor overload">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor overload">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor overload">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Error" visibility="public" procflags="class overload virtual">
        </methodref>
        <methodref name="Error" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="Add" visibility="public" procflags="inline">
        </methodref>
        <methodref name="AddRange" visibility="public" procflags="overload">
        </methodref>
        <methodref name="AddRange" visibility="public" procflags="overload inline">
        </methodref>
        <methodref name="AddRange" visibility="public" procflags="overload inline">
        </methodref>
        <methodref name="Insert" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InsertRange" visibility="public" procflags="overload">
        </methodref>
        <methodref name="InsertRange" visibility="public" procflags="overload">
        </methodref>
        <methodref name="InsertRange" visibility="public" procflags="overload">
        </methodref>
        <methodref name="Pack" visibility="public" procflags="overload">
        </methodref>
        <methodref name="Pack" visibility="public" procflags="overload">
        </methodref>
        <methodref name="Remove" visibility="public" procflags="inline">
        </methodref>
        <methodref name="RemoveItem" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Delete" visibility="public" procflags="inline">
        </methodref>
        <methodref name="DeleteRange" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ExtractItem" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Extract" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Exchange" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Move" visibility="public" procflags="inline">
        </methodref>
        <methodref name="First" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Last" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Clear" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Expand" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Contains" visibility="public" procflags="inline">
        </methodref>
        <methodref name="IndexOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="IndexOfItem" visibility="public" procflags="inline">
        </methodref>
        <methodref name="LastIndexOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Reverse" visibility="public" procflags="inline">
        </methodref>
        <methodref name="Sort" visibility="public" procflags="overload">
        </methodref>
        <methodref name="Sort" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BinarySearch" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BinarySearch" visibility="public" procflags="overload">
        </methodref>
        <methodref name="TrimExcess" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ToArray" visibility="public" procflags="final override">
        </methodref>
        <propertyref name="Capacity" visibility="public">
        </propertyref>
        <propertyref name="Count" visibility="public">
        </propertyref>
        <propertyref name="Items" visibility="public">
        </propertyref>
        <propertyref name="List" visibility="public">
        </propertyref>
        <eventref name="OnNotify" visibility="public">
        </eventref>
        <methodref name="GetEnumerator" visibility="public" procflags="inline">
        </methodref>
        <ancestor name="{System.Generics.Collections}TEnumerable&lt;SymMng.SymphonyTask.TSymphonyTask&gt;" namespace="SymMng.SymphonyTask">
          <methodref name="ToArrayImpl" visibility="private">
          </methodref>
          <methodref name="DoGetEnumerator" visibility="protected" procflags="abstract virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="GetEnumerator" visibility="public">
          </methodref>
          <methodref name="ToArray" visibility="public" procflags="virtual">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FPluginForTask" type="TGetPlugInForTaskFunc" visibility="private" size="4" offset="56" file="SymMng.SymphonyTask.pas" line="56" />
      <procedure name="SetPluginForTask" visibility="private" file="SymMng.SymphonyTask.pas" line="57">
        <parameters>
          <parameter name="Value" type="TGetPlugInForTaskFunc" paramflags="const" />
        </parameters>
      </procedure>
      <function name="GetPlugInName" visibility="private" file="SymMng.SymphonyTask.pas" line="58">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <retval type="string" />
        </parameters>
      </function>
      <function name="GetPlugIn" visibility="private" file="SymMng.SymphonyTask.pas" line="59">
        <parameters>
          <parameter name="PlugInName" type="string" />
          <retval type="TPlugIn" />
        </parameters>
      </function>
      <function name="AddTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="61">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <retval type="TSymphonyTask" />
        </parameters>
      </function>
      <function name="AddTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="62">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <parameter name="APlugIn" type="TPlugIn" />
          <retval type="TSymphonyTask" />
        </parameters>
      </function>
      <function name="IndexOfTask" visibility="public" file="SymMng.SymphonyTask.pas" line="64">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <retval type="Integer" />
        </parameters>
      </function>
      <function name="OpenTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="66">
        <parameters>
          <parameter name="ATask" type="TSymphonyTask" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="OpenTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="67">
        <parameters>
          <parameter name="ATask" type="TSymphonyTask" />
          <parameter name="APlugIn" type="TPlugIn" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="OpenTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="68">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <parameter name="APlugIn" type="TPlugIn" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CloneTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="70">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <retval type="TSymphonyTask" />
        </parameters>
      </function>
      <function name="CloneTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="71">
        <parameters>
          <parameter name="ATask" type="TSymphonyTask" />
          <retval type="TSymphonyTask" />
        </parameters>
      </function>
      <function name="CloseTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="73">
        <parameters>
          <parameter name="ATask" type="IXMLNode" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="CloseTask" visibility="public" procflags="overload" file="SymMng.SymphonyTask.pas" line="74">
        <parameters>
          <parameter name="ATask" type="TSymphonyTask" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <property name="PluginForTask" visibility="public" read="FPluginForTask" write="SetPluginForTask" type="TPlugIn" file="SymMng.SymphonyTask.pas" line="76" />
    </members>
  </class>
</namespace>
